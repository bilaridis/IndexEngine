<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IndexEngine</name>
    </assembly>
    <members>
        <member name="T:Indexer.Document">
            <summary>
            A document that has been indexed by the index engine.
            </summary>
        </member>
        <member name="M:Indexer.Document.#ctor">
            <summary>
            Creates an empty Document object.  Creation of the object structure is relegated to the application using the object.
            </summary>
        </member>
        <member name="M:Indexer.Document.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Byte[])">
            <summary>
            Creates a populated Document object.  
            </summary>
            <param name="guid">Globally unique identifier for the document.  If one is not supplied, IndexEngine will supply one.</param>
            <param name="title">Non-nullable title of the document.</param>
            <param name="description">Description of the document.</param>
            <param name="handle">Non-nullable URL or other handle to access the document on persistent storage (managed by the caller).</param>
            <param name="source">Source of the document (managed by the caller)></param>
            <param name="addedBy">Name of the user adding the document (managed by the caller).</param>
            <param name="data">Byte array data from the source document.</param>
        </member>
        <member name="P:Indexer.Document.DocumentID">
            <summary>
            Integer uniquely representing the document; typically used if stored in a database.
            </summary>
        </member>
        <member name="P:Indexer.Document.Title">
            <summary>
            Title of the document.  Supplied by the caller.
            </summary>
        </member>
        <member name="P:Indexer.Document.Description">
            <summary>
            Free-form text description of the document.  Supplied by the caller.
            </summary>
        </member>
        <member name="P:Indexer.Document.Handle">
            <summary>
            URL or other handle to use when attempting to reach the content.  Supplied by the caller.
            </summary>
        </member>
        <member name="P:Indexer.Document.Source">
            <summary>
            Source of the content, i.e. YouTube, Vimeo, web, etc.  Supplied by the caller.
            </summary>
        </member>
        <member name="P:Indexer.Document.AddedBy">
            <summary>
            Free-form text describing who added the document.  Supplied by the caller.
            </summary>
        </member>
        <member name="P:Indexer.Document.GUID">
            <summary>
            GUID for this document.  Assigned by the index engine.
            </summary>
        </member>
        <member name="P:Indexer.Document.Added">
            <summary>
            UTC timestamp when the document was added.  Assigned by the index engine.
            </summary>
        </member>
        <member name="P:Indexer.Document.Data">
            <summary>
            Document contents in byte array form.  
            </summary>
        </member>
        <member name="M:Indexer.Document.ToString">
            <summary>
            Create a human-readable string version of the object.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="T:Indexer.IndexEngine">
            <summary>
            IndexEngine is a lightweight document and text indexing platform written in C# targeted to both .NET Core and .NET Framework.  
            IndexEngine uses Sqlite as a storage repository for index data.  
            IndexEngine does NOT provide storage of the original documents.
            </summary>
        </member>
        <member name="F:Indexer.IndexEngine.Logger">
            <summary>
            Method to invoke when logging.
            </summary>
        </member>
        <member name="P:Indexer.IndexEngine.MaxIndexingThreads">
            <summary>
            Set the maximum number of threads that can be instantiated to process documents.
            </summary>
        </member>
        <member name="P:Indexer.IndexEngine.CurrentIndexingThreads">
            <summary>
            Get the number of threads currently processing documents.
            </summary>
        </member>
        <member name="P:Indexer.IndexEngine.DocumentsIndexing">
            <summary>
            Get a list of strings containing the user-supplied GUIDs of each of the documents being processed.
            </summary>
        </member>
        <member name="P:Indexer.IndexEngine.TermMinimumLength">
            <summary>
            Minimum character length for a term to be indexed.
            </summary>
        </member>
        <member name="P:Indexer.IndexEngine.TermDelimiters">
            <summary>
            Delimiters to use when identifying terms in a document.  
            </summary>
        </member>
        <member name="P:Indexer.IndexEngine.IgnoreWords">
            <summary>
            List of words to ignore when indexing.
            </summary>
        </member>
        <member name="M:Indexer.IndexEngine.#ctor(System.String)">
            <summary>
            Instantiate the IndexEngine.
            </summary>
            <param name="databaseFile">Database filename to use.  If this file does not exist, it will be created for you.</param>
        </member>
        <member name="M:Indexer.IndexEngine.Dispose">
            <summary>
            Tear down IndexEngine and dispose of resources.
            </summary>
        </member>
        <member name="M:Indexer.IndexEngine.Add(Indexer.Document)">
            <summary>
            Add a document to the index.
            </summary>
            <param name="document">Document.</param>
        </member>
        <member name="M:Indexer.IndexEngine.Add(Indexer.Document,System.Collections.Generic.List{System.String})">
            <summary>
            Add a document to the index with tags.
            </summary>
            <param name="document">Document.</param>
            <param name="tags">Tags.</param>
        </member>
        <member name="M:Indexer.IndexEngine.AddAsync(Indexer.Document)">
            <summary>
            Add a document to the index asynchronously.
            </summary>
            <param name="document">Document.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Indexer.IndexEngine.AddAsync(Indexer.Document,System.Collections.Generic.List{System.String})">
            <summary>
            Add a document to the index with tags, asynchronously.
            </summary>
            <param name="document">Document.</param>
            <param name="tags">Tags.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Indexer.IndexEngine.Search(System.Collections.Generic.List{System.String})">
            <summary>
            Search the index.
            </summary>
            <param name="terms">Search terms.</param>
            <returns>List of documents.</returns>
        </member>
        <member name="M:Indexer.IndexEngine.Search(System.Collections.Generic.List{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Search the index.
            </summary>
            <param name="terms">Search terms.</param>
            <param name="indexStart">Index of results from which to begin returning records.</param>
            <param name="maxResults">Maximum number of records to return.</param>
            <returns>List of documents.</returns>
        </member>
        <member name="M:Indexer.IndexEngine.Search(System.Collections.Generic.List{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},SqliteWrapper.Expression)">
            <summary>
            Search the index.
            </summary>
            <param name="terms">Search terms.</param>       
            <param name="indexStart">Index of results from which to begin returning records.</param>
            <param name="maxResults">Maximum number of records to return.</param>
            <param name="filter">Database filters.</param> 
            <returns>List of documents.</returns>
        </member>
        <member name="M:Indexer.IndexEngine.GetDocumentGuidsByTerms(System.Collections.Generic.List{System.String})">
            <summary>
            Get document GUIDs that contain supplied terms.
            </summary>
            <param name="terms">List of terms.</param> 
            <returns>List of document GUIDs.</returns>
        </member>
        <member name="M:Indexer.IndexEngine.GetDocumentGuidsByTerms(System.Collections.Generic.List{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},SqliteWrapper.Expression)">
            <summary>
            Get document GUIDs that contain supplied terms.
            </summary>
            <param name="terms">List of terms.</param>
            <param name="indexStart">Index of results from which to begin returning records.</param>
            <param name="maxResults">Maximum number of records to return.</param>
            <param name="filter">Database filters.</param>
            <returns>List of document GUIDs.</returns>
        </member>
        <member name="M:Indexer.IndexEngine.DeleteDocumentByGuid(System.String)">
            <summary>
            Delete document by its GUID.
            </summary>
            <param name="guid">GUID.</param>
        </member>
        <member name="M:Indexer.IndexEngine.DeleteDocumentByHandle(System.String)">
            <summary>
            Delete document by its handle.
            </summary>
            <param name="handle">Handle.</param>
        </member>
        <member name="M:Indexer.IndexEngine.GetDocumentByGuid(System.String)">
            <summary>
            Get a document by its GUID.
            </summary>
            <param name="guid">GUID.</param>
            <returns>Document.</returns>
        </member>
        <member name="M:Indexer.IndexEngine.GetDocumentByHandle(System.String)">
            <summary>
            Get a document by its handle.
            </summary>
            <param name="handle">Handle.</param>
            <returns>Document.</returns>
        </member>
        <member name="M:Indexer.IndexEngine.IsHandleIndexed(System.String)">
            <summary>
            Check if a document has been indexed by its handle.
            </summary>
            <param name="handle">Handle.</param>
            <returns>True if the document exists in the index.</returns>
        </member>
        <member name="M:Indexer.IndexEngine.IsGuidIndexed(System.String)">
            <summary>
            Check if a document has been indexed by its GUID.
            </summary>
            <param name="guid">GUID</param>
            <returns>True if the document exists in the index.</returns>
        </member>
        <member name="M:Indexer.IndexEngine.GetTermReferenceCount(System.String)">
            <summary>
            Get the number of references for a given term.
            </summary>
            <param name="term">Term.</param>
            <returns>Reference count.</returns>
        </member>
        <member name="M:Indexer.IndexEngine.Backup(System.String)">
            <summary>
            Backup the database to the specified filename.
            </summary>
            <param name="destination">Destination filename.</param>
        </member>
        <member name="M:Indexer.IndexEngine.Dispose(System.Boolean)">
            <summary>
            Tear down IndexEngine and dispose of resources.
            </summary>
            <param name="disposing">True if disposing of resources.</param>
        </member>
    </members>
</doc>
